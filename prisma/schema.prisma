// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}
 
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@map("sessions")
}
 
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  role         String? @default("user")
  accounts      Account[]
  sessions      Session[]
  Assistente    Assistente[]
  Creditos      Creditos[]
  SessionWhatsapp SessionWhatsapp[]

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@map("users")
}

model SessionWhatsapp {
  id         Int    @id @default(autoincrement())
  userId     String  @map("user_id") @unique
  sessionId  String @unique
  assistenteId String @unique
  status     String @default("Inativo")
  imageProfile      String? @db.VarChar(1000)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  
  SessionWhatsappMsgs SessionWhatsappMsgs[]

  User User @relation(fields: [userId], references: [id], onDelete: Cascade)

}

model SessionWhatsappMsgs{
  id         Int    @id @default(autoincrement())
  sessionId  String 
  userPhone    String @unique
  threadId    String
  assistenteId String
  status     String @default("Ativo")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  SessionWhatsapp SessionWhatsapp @relation(fields: [sessionId], references: [sessionId], onDelete: Cascade)
}

// model Historico {
//   id         Int    @id @default(autoincrement())
//   sessionId     String  @map("user_id")
//   store   Json
//   createdAt  DateTime @default(now())
// }


model Assistente {
  id            String       @id @default(cuid())
  userId        String   @map("user_id")
  nome          String
  image        String? @default("/perfil-img-default/3.webp")
  status        String? @default("Ativo")
  comunicacao   String? @default("FORMAL")
  finalidade    String? @default("VENDAS")
  treinamento      String? 
  assistenteIdGPT     String? 
  threadTreiamento    String?
  modelo        String? @default("GPT-3.5 TURBO")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  User User @relation(fields: [userId], references: [id], onDelete: Cascade)
}


model Admin {
  id            Int       @id @default(autoincrement())
  userEmail     String   @unique
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Creditos {
  id            Int       @id @default(autoincrement())
  userId        String   @map("user_id") @unique  
  creditos      Int
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  User User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
  @@map("verificationtokens")
}



